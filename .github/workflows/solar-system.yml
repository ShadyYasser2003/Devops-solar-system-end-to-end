name: Solar System Workflow

on: 
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
env:
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
  unit-testing:
      name: Unit Testing
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
  
      - name: Install Dependencies
        run: npm install
  
      - name: Unit Testing
        run: npm test
        
      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage:
            name: Coverage Report
            runs-on: ubuntu-latest
            needs: unit-testing
            if: always()
            continue-on-error: true
            steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Setup NodeJS Version
              uses: actions/setup-node@v3
              with:
                node-version: 18

            - name: Cache NPM dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
                  
            - name: Install Dependencies
              run: npm install
        
            - name: Generate Coverage Report
              run: npm run coverage

            - name: Upload Coverage Report
              uses: actions/upload-artifact@v4
              with:
                name: Coverage-Report
                path: coverage/

  reports-s3:
    needs: [unit-testing, code-coverage]
    name: AMS S3 - Upload Reports
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v4
        with:
          name: Mocha-Test-Result
        continue-on-error: true   # ÿ≠ÿ™Ÿâ ŸÑŸà ŸÖÿ¥ ŸÖŸàÿ¨ŸàÿØ ŸäŸÉŸÖŸÑ

      - name: Download Code Coverage Artifact  
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-Result
        continue-on-error: true   # ÿ®ÿ±ÿ∂Ÿá ŸáŸÜÿß

      - name: Merge Test Files
        run: |  
          ls -ltr || true
          mkdir reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${{ github.sha }}/ || true
          mv test-results.xml reports-${{ github.sha }}/ || true
          ls -ltr reports-${{ github.sha }}/

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: reports-bucket-shady-yasser
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
          AWS_REGION: 'us-east-1'
          SOURCE_DIR: reports-${{ github.sha }}
          DEST_DIR: reports/${{ github.sha }}  
                               
  docker:
      name: Docker Image CI
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage]
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKER_HUB_USERNAME }}/solar-system-world:${{ github.sha }}
        
      - name: Docker Image Test
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
        run: |
          echo "üöÄ Starting container for testing..."
      
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKER_HUB_USERNAME }}/solar-system-world:${{ github.sha }}
      
          echo "‚è≥ Waiting for app to be healthy..."
          for i in {1..10}; do
            if curl -s http://127.0.0.1:3000/live | grep -q "live"; then
              echo "‚úÖ App is healthy and responded correctly"
              break
            fi
            echo "Waiting... ($i/10)"
            sleep 3
          done
      
          # ŸÑŸà ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÖŸÅÿπŸÑÿ¥ ŸÜŸÅÿ≥Ÿá
          if ! curl -s http://127.0.0.1:3000/live | grep -q "live"; then
            echo "‚ùå App failed health check"
            docker logs solar-system-app
            exit 1
          fi
      
          echo "üßπ Cleaning up..."
          echo "----------------------------------------------"
          echo "üßπ stop solar-system-app..."
          docker stop solar-system-app
          echo "üßπ remove solar-system-app..."
          docker rm solar-system-app
      