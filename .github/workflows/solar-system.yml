name: Solar System Workflow

on: 
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
env:
  MONGO_URI: ${{ secrets.MONGO_URI }}

jobs:
  
  # unit-testing:
  #   name: Unit Testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Setup NodeJS Version
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18

  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
  
  #     - name: Install Dependencies
  #       run: npm install
  
  #     - name: Unit Testing
  #       run: npm test
        
  #     - name: Archive Test Result
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Mocha-Test-Result
  #         path: test-results.xml   # ŸÖŸÑŸÅ Ÿàÿßÿ≠ÿØ ÿ®ÿ≥

  # code-coverage:
  #   name: Coverage Report
  #   runs-on: ubuntu-latest
  #   needs: unit-testing
  #   if: always()
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Setup NodeJS Version
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18

  #     - name: Cache NPM dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        
  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Generate Coverage Report
  #       run: npm run coverage || echo "‚ö†Ô∏è Coverage generation failed, continuing anyway"
      
  #     - name: Upload Coverage Report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Code-Coverage-Result
  #         path: coverage/
  #         if-no-files-found: ignore

  # reports-s3:
  #   name: Upload Reports to S3
  #   runs-on: ubuntu-latest
  #   needs: [unit-testing, code-coverage]
  #   if: always()
  #   steps:
  #     - name: Download Mocha Test Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: Mocha-Test-Result
  #         path: ./unit-testing

  #     - name: Download Code Coverage Artifact  
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: Code-Coverage-Result
  #         path: ./code-coverage

  #     - name: Organize Reports into Commit Folder
  #       run: |
  #         mkdir -p reports-${{ github.sha }}
  #         mv unit-testing reports-${{ github.sha }}/ || true
  #         mv code-coverage reports-${{ github.sha }}/ || true

  #         echo "‚úÖ Final Reports Structure:"
  #         tree reports-${{ github.sha }} || ls -R reports-${{ github.sha }}

  #     - name: Upload to S3 
  #       uses: jakejarvis/s3-sync-action@master
  #       with:
  #         args: --follow-symlinks --delete
  #       env:
  #         AWS_S3_BUCKET: reports-bucket-shady-yasser
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
  #         AWS_REGION: 'us-east-1'
  #         SOURCE_DIR: reports-${{ github.sha }}
  #         DEST_DIR: reports/${{ github.sha }}
                               
  docker:
      name: Docker Image CI
      runs-on: ubuntu-latest
      # needs: [unit-testing, code-coverage]
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKER_HUB_USERNAME }}/solar-system-world:${{ github.sha }}
        
      - name: Docker Image Test
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        
        run: |
          echo "üöÄ Starting container for testing..."
      
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKER_HUB_USERNAME }}/solar-system-world:${{ github.sha }}
      
          echo "‚è≥ Waiting for app to be healthy..."
          for i in {1..10}; do
            if curl -s http://127.0.0.1:3000/live | grep -q "live"; then
              echo "‚úÖ App is healthy and responded correctly"
              break
            fi
            echo "Waiting... ($i/10)"
            sleep 3
          done
      
          # ŸÑŸà ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÖŸÅÿπŸÑÿ¥ ŸÜŸÅÿ≥Ÿá
          if ! curl -s http://127.0.0.1:3000/live | grep -q "live"; then
            echo "‚ùå App failed health check"
            docker logs solar-system-app
            exit 1
          fi
      
          echo "üßπ Cleaning up..."
          echo "----------------------------------------------"
          echo "üßπ stop solar-system-app..."
          docker stop solar-system-app
          echo "üßπ remove solar-system-app..."
          docker rm solar-system-app
    
  dev-deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    # outputs:
    #   APP_URL: ${{ steps.set_app_url.outputs.APP_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Connect to EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Ensure namespace exists
        run: |
          kubectl get namespace dev || kubectl create namespace dev

      - name: Deploy with Helm
        run: |
          helm upgrade --install solar-system ./my_app \
            --namespace dev \
            --set global.dockerHubUser=${{ vars.DOCKER_HUB_USERNAME }} \
            --set global.imageTag=${{ github.sha }} \
            --set secrets.mongoUri="${{ secrets.MONGO_URI }}" \
            --set env.NODE_ENV=development

      - name: Wait for Deployment Rollout
        run: |
          kubectl rollout status deployment/app-chart -n dev

      # - name: Set APP_URL Output (Secret Safe)
      #   id: set_app_url
      #   run: |
      #     APP_URL="http://$(kubectl get svc app-chart-service -n dev -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')/live"
      #     echo "APP_URL=$APP_URL" >> $GITHUB_OUTPUT

  integration-test:
    runs-on: ubuntu-latest
    needs: dev-deploy
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Set APP_URL Output (Secret Safe)
        id: set_app_url
        run: |
          APP_URL="http://$(kubectl get svc app-chart-service -n dev -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')/live"
          
      - name: Check App Health
        run: |
          APP_URL="${{ steps.set_app_url.outputs.APP_URL }}"
          for i in {1..10}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL || echo "000")
            if [ "$RESPONSE" == "200" ]; then
              echo "‚úÖ Application is healthy!"
              exit 0
            fi
            echo "Waiting for app to be ready... ($i/10)"
            sleep 5
          done
          echo "‚ùå Application failed health check"
          exit 1
